open BeyondBasis.Pervasive

structure DA = Citroen.Imperative.DynamicArray

val lines = (Std.Vector.sub (Util.get_args 1, 0))
            |> Std.Option.Unsafe.get
            |> Util.file_to_lines

val packs = Std.Vector.fold_left (
      lines,
      [[0]],
      fn (line, packs) =>
         case packs of
             | pack :: rest =>
                 if line = ""
                 then [0] :: pack :: rest
                 else ((Std.Int.from_string line |> Std.Result.Unsafe.get_ok) :: pack) :: rest
             | _ => raise Fail ("Invalid line " ^ line)
         end
    )


val calories =  Std.Iterator.from_list packs
                </ Std.Iterator.map />
                (fn pack => Std.List.fold_left (pack, 0, op+))
                |> DA.from_iter

val _ = DA.sort (calories, op<=)

val first = DA.pop calories |> Std.Option.Unsafe.get
val second = DA.pop calories |> Std.Option.Unsafe.get
val third = DA.pop calories |> Std.Option.Unsafe.get

val _ = println ("part1: Max is " ^ (Std.Int.to_string first))
val _ = println ("part1: top3 is " ^ (Std.Int.to_string (first + second + third)))
